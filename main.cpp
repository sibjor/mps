/*
    Copyright (c) 2025 Sixten Bj√∂rling

    (https://sibjor.se)

    The MUPUS C++ document might be large, please SEARCH to locate your interests!
*/

#include <iostream>
#include <vector>
#include <filesystem>

class MUPUS
{
    struct ForeginSyntax
    {
        struct Markup
        {
            struct HTML
            {
                std::string doctype = "<!DOCTYPE html>";
                std::string html = "<html>";
                std::string head = "<head>";
                std::string title_open = "<title>";
                std::string title_close = "</title>";
                std::string meta = "<meta>";
                std::string link = "<link>";
                std::string style_open = "<style>";
                std::string style_close = "</style>";
                std::string script_open = "<script>";
                std::string script_close = "</script>";
                std::string noscript_open = "<noscript>";
                std::string noscript_close = "</noscript>";
                std::string head_close = "</head>";
                std::string body_open = "<body>";
                std::string header_open = "<header>";
                std::string header_close = "</header>";
                std::string nav_open = "<nav>";
                std::string nav_close = "</nav>";
                std::string main_open = "<main>";
                std::string main_close = "</main>";
                std::string section_open = "<section>";
                std::string section_close = "</section>";
                std::string article_open = "<article>";
                std::string article_close = "</article>";
                std::string aside_open = "<aside>";
                std::string aside_close = "</aside>";
                std::string footer_open = "<footer>";
                std::string footer_close = "</footer>";
                std::string h1_open = "<h1>";
                std::string h1_close = "</h1>";
                std::string h2_open = "<h2>";
                std::string h2_close = "</h2>";
                std::string h3_open = "<h3>";
                std::string h3_close = "</h3>";
                std::string h4_open = "<h4>";
                std::string h4_close = "</h4>";
                std::string h5_open = "<h5>";
                std::string h5_close = "</h5>";
                std::string h6_open = "<h6>";
                std::string h6_close = "</h6>";
                std::string p_open = "<p>";
                std::string p_close = "</p>";
                std::string br = "<br>";
                std::string hr = "<hr>";
                std::string pre_open = "<pre>";
                std::string pre_close = "</pre>";
                std::string blockquote_open = "<blockquote>";
                std::string blockquote_close = "</blockquote>";
                std::string ol_open = "<ol>";
                std::string ol_close = "</ol>";
                std::string ul_open = "<ul>";
                std::string ul_close = "</ul>";
                std::string li_open = "<li>";
                std::string li_close = "</li>";
                std::string dl_open = "<dl>";
                std::string dl_close = "</dl>";
                std::string dt_open = "<dt>";
                std::string dt_close = "</dt>";
                std::string dd_open = "<dd>";
                std::string dd_close = "</dd>";
                std::string a_open = "<a>";
                std::string a_close = "</a>";
                std::string img = "<img>";
                std::string iframe_open = "<iframe>";
                std::string iframe_close = "</iframe>";
                std::string embed_open = "<embed>";
                std::string embed_close = "</embed>";
                std::string object_open = "<object>";
                std::string object_close = "</object>";
                std::string param = "<param>";
                std::string video_open = "<video>";
                std::string video_close = "</video>";
                std::string audio_open = "<audio>";
                std::string audio_close = "</audio>";
                std::string source = "<source>";
                std::string track = "<track>";
                std::string canvas_open = "<canvas>";
                std::string canvas_close = "</canvas>";
                std::string svg_open = "<svg>";
                std::string svg_close = "</svg>";
                std::string math_open = "<math>";
                std::string math_close = "</math>";
                std::string table_open = "<table>";
                std::string table_close = "</table>";
                std::string caption = "<caption>";
                std::string thead_open = "<thead>";
                std::string thead_close = "</thead>";
                std::string tbody_open = "<tbody>";
                std::string tbody_close = "</tbody>";
                std::string tfoot_open = "<tfoot>";
                std::string tfoot_close = "</tfoot>";
                std::string tr_open = "<tr>";
                std::string tr_close = "</tr>";
                std::string th_open = "<th>";
                std::string th_close = "</th>";
                std::string td_open = "<td>";
                std::string td_close = "</td>";
                std::string form_open = "<form>";
                std::string form_close = "</form>";
                std::string input = "<input>";
                std::string textarea_open = "<textarea>";
                std::string textarea_close = "</textarea>";
                std::string button_open = "<button>";
                std::string button_close = "</button>";
                std::string select_open = "<select>";
                std::string select_close = "</select>";
                std::string option_open = "<option>";
                std::string option_close = "</option>";
                std::string optgroup_open = "<optgroup>";
                std::string optgroup_close = "</optgroup>";
                std::string label = "<label>";
                std::string fieldset_open = "<fieldset>";
                std::string fieldset_close = "</fieldset>";
                std::string legend = "<legend>";
                std::string datalist = "<datalist>";
                std::string output = "<output>";
                std::string progress = "<progress>";
                std::string meter = "<meter>";
                std::string details_open = "<details>";
                std::string details_close = "</details>";
                std::string summary = "<summary>";
                std::string dialog = "<dialog>";
                std::string template_open = "<template>";
                std::string template_close = "</template>";
                std::string slot = "<slot>";
            };
            struct Markdown
            {
                std::string h1 = "# ";
                std::string h2 = "## ";
                std::string h3 = "### ";
                std::string h4 = "#### ";
                std::string h5 = "##### ";
                std::string h6 = "###### ";
                std::string italic = "*";
                std::string bold = "**";
                std::string bold_italic = "***";
                std::string strikethrough = "~~";
                std::string inline_code = "`";
                std::string code_block = "```";
                std::string blockquote = "> ";
                std::string unordered_list = "- ";
                std::string ordered_list = "1. ";
                std::string link_open = "[";
                std::string link_middle = "](";
                std::string link_close = ")";
                std::string image_open = "![";
                std::string image_middle = "](";
                std::string image_close = ")";
                std::string horizontal_rule = "---";
                std::string table_column_separator = "|";
                std::string line_break = "\n";
            };
        };
        struct Style
        {
            struct CSS
            {
                std::string color;
                std::string background_color;
                std::string font_size;
                std::string font_family;
                std::string margin;
                std::string padding;
                std::string border;
                std::string width;
                std::string height;
                std::string display;
                std::string position;
                std::string top;
                std::string left;
                std::string right;
                std::string bottom;
                std::string z_index;
                std::string overflow;
                std::string text_align;
                std::string vertical_align;
                std::string line_height;
                std::string box_shadow;
                std::string border_radius;
                std::string opacity;
                std::string visibility;
                std::string cursor;
                std::string transition;
                std::string transform;
                std::string content;
                std::string clip_path;
                std::string animation;
                std::string keyframes;
            };
        };
        struct CPP
        {
            struct C
            {
                std::string semicolon = ";";
                std::string open_brace = "{";
                std::string close_brace = "}";
                std::string open_parenthesis = "(";
                std::string close_parenthesis = ")";
                std::string open_bracket = "[";
                std::string close_bracket = "]";
                std::string comma = ",";
                std::string dot = ".";
                std::string colon = ":";
                std::string question_mark = "?";
                std::string exclamation_mark = "!";
                std::string ampersand = "&";
                std::string vertical_bar = "|";
                std::string caret = "^";
                std::string tilde = "~";
                std::string plus = "+";
                std::string minus = "-";
                std::string asterisk = "*";
                std::string slash = "/";
                std::string percent = "%";
                std::string equals = "=";
                std::string less_than = "<";
                std::string greater_than = ">";
                std::string logical_and = "&&";
                std::string logical_or = "||";
                std::string equal_to = "==";
                std::string not_equal_to = "!=";
                std::string less_than_or_equal_to = "<=";
                std::string greater_than_or_equal_to = ">=";
                std::string increment = "++";
                std::string decrement = "--";
                std::string arrow = "->";
                std::string scope_resolution = "::";
                std::string ellipsis = "...";

                std::string kw_auto = "auto";
                std::string kw_break = "break";
                std::string kw_case = "case";
                std::string kw_char = "char";
                std::string kw_const = "const";
                std::string kw_continue = "continue";
                std::string kw_default = "default";
                std::string kw_do = "do";
                std::string kw_double = "double";
                std::string kw_else = "else";
                std::string kw_enum = "enum";
                std::string kw_extern = "extern";
                std::string kw_float = "float";
                std::string kw_for = "for";
                std::string kw_goto = "goto";
                std::string kw_if = "if";
                std::string kw_inline = "inline";
                std::string kw_int = "int";
                std::string kw_long = "long";
                std::string kw_register = "register";
                std::string kw_restrict = "restrict";
                std::string kw_return = "return";
                std::string kw_short = "short";
                std::string kw_signed = "signed";
                std::string kw_sizeof = "sizeof";
                std::string kw_static = "static";
                std::string kw_struct = "struct";
                std::string kw_switch = "switch";
                std::string kw_typedef = "typedef";
                std::string kw_union = "union";
                std::string kw_unsigned = "unsigned";
                std::string kw_void = "void";
                std::string kw_volatile = "volatile";
                std::string kw_while = "while";
                std::string kw_alignas = "_Alignas";
                std::string kw_alignof = "_Alignof";
                std::string kw_atomic = "_Atomic";
                std::string kw_bool = "_Bool";
                std::string kw_complex = "_Complex";
                std::string kw_generic = "_Generic";
                std::string kw_imaginary = "_Imaginary";
                std::string kw_noreturn = "_Noreturn";
                std::string kw_static_assert = "_Static_assert";
                std::string kw_thread_local = "_Thread_local";
            };
        };
        struct Python
        {
            std::string def = "def";
            std::string return_kw = "return";
            std::string if_kw = "if";
            std::string elif_kw = "elif";
            std::string else_kw = "else";
            std::string for_kw = "for";
            std::string while_kw = "while";
            std::string break_kw = "break";
            std::string continue_kw = "continue";
            std::string pass_kw = "pass";
            std::string import_kw = "import";
            std::string from_kw = "from";
            std::string as_kw = "as";
            std::string class_kw = "class";
            std::string try_kw = "try";
            std::string except_kw = "except";
            std::string finally_kw = "finally";
            std::string raise_kw = "raise";
            std::string with_kw = "with";
            std::string lambda_kw = "lambda";
            std::string global_kw = "global";
            std::string nonlocal_kw = "nonlocal";
            std::string assert_kw = "assert";
            std::string del_kw = "del";
            std::string yield_kw = "yield";
            std::string async_kw = "async";
            std::string await_kw = "await";
            std::string True_kw = "True";
            std::string False_kw = "False";
            std::string None_kw = "None";
            std::string and_kw = "and";
            std::string or_kw = "or";
            std::string not_kw = "not";
            std::string is_kw = "is";
            std::string in_kw = "in";
            std::string print_func = "print";
            std::string input_func = "input";
            std::string len_func = "len";
            std::string range_func = "range";
            std::string open_func = "open";
            std::string int_func = "int";
            std::string float_func = "float";
            std::string str_func = "str";
            std::string list_func = "list";
            std::string dict_func = "dict";
            std::string set_func = "set";
            std::string tuple_func = "tuple";
            std::string bool_func = "bool";
            std::string type_func = "type";
            std::string id_func = "id";
            std::string dir_func = "dir";
            std::string help_func = "help";
            std::string abs_func = "abs";
            std::string pow_func = "pow";
            std::string round_func = "round";
            std::string sorted_func = "sorted";
            std::string zip_func = "zip";
            std::string map_func = "map";
            std::string filter_func = "filter";
            std::string any_func = "any";
            std::string all_func = "all";
            std::string sum_func = "sum";
            std::string min_func = "min";
            std::string max_func = "max";
            std::string enumerate_func = "enumerate";
            std::string eval_func = "eval";
            std::string exec_func = "exec";
            std::string isinstance_func = "isinstance";
            std::string issubclass_func = "issubclass";
            std::string hasattr_func = "hasattr";
            std::string getattr_func = "getattr";
            std::string setattr_func = "setattr";
            std::string delattr_func = "delattr";
            std::string format_func = "format";
            std::string repr_func = "repr";
            std::string hash_func = "hash";
            std::string bin_func = "bin";
            std::string oct_func = "oct";
            std::string hex_func = "hex";
            std::string chr_func = "chr";
            std::string ord_func = "ord";
            std::string ascii_func = "ascii";
            std::string bytes_func = "bytes";
            std::string bytearray_func = "bytearray";
            std::string memoryview_func = "memoryview";
            std::string complex_func = "complex";
            std::string divmod_func = "divmod";
            std::string frozenset_func = "frozenset";
            std::string iter_func = "iter";
            std::string next_func = "next";
            std::string reversed_func = "reversed";
            std::string slice_func = "slice";
            std::string vars_func = "vars";
            std::string globals_func = "globals";
            std::string locals_func = "locals";
            std::string compile_func = "compile";
            std::string callable_func = "callable";
            std::string del_func = "del";
        };
        struct JavaScript
        {
            std::string var = "var";
            std::string let = "let";
            std::string const_kw = "const";
            std::string function = "function";
            std::string return_kw = "return";
            std::string if_kw = "if";
            std::string else_kw = "else";
            std::string for_kw = "for";
            std::string while_kw = "while";
            std::string do_kw = "do";
            std::string switch_kw = "switch";
            std::string case_kw = "case";
            std::string break_kw = "break";
            std::string continue_kw = "continue";
            std::string default_kw = "default";
            std::string try_kw = "try";
            std::string catch_kw = "catch";
            std::string finally_kw = "finally";
            std::string throw_kw = "throw";
            std::string class_kw = "class";
            std::string extends_kw = "extends";
            std::string constructor_kw = "constructor";
            std::string super_kw = "super";
            std::string this_kw = "this";
            std::string new_kw = "new";
            std::string delete_kw = "delete";
            std::string typeof_kw = "typeof";
            std::string instanceof_kw = "instanceof";
            std::string in_kw = "in";
            std::string of_kw = "of";
            std::string async_kw = "async";
            std::string await_kw = "await";
            std::string import_kw = "import";
            std::string export_kw = "export";
            std::string from_kw = "from";
            std::string as_kw = "as";
            std::string null_kw = "null";
            std::string undefined_kw = "undefined";
            std::string true_kw = "true";
            std::string false_kw = "false";
            std::string NaN_kw = "NaN";
            std::string Infinity_kw = "Infinity";
            std::string console_log = "console.log";
            std::string console_error = "console.error";
            std::string console_warn = "console.warn";
            std::string setTimeout_func = "setTimeout";
            std::string setInterval_func = "setInterval";
            std::string clearTimeout_func = "clearTimeout";
            std::string clearInterval_func = "clearInterval";
            std::string parseInt_func = "parseInt";
            std::string parseFloat_func = "parseFloat";
            std::string isNaN_func = "isNaN";
            std::string isFinite_func = "isFinite";
            std::string Object_func = "Object";
            std::string Array_func = "Array";
            std::string String_func = "String";
            std::string Number_func = "Number";
            std::string Boolean_func = "Boolean";
            std::string Math_func = "Math";
            std::string Date_func = "Date";
            std::string RegExp_func = "RegExp";
            std::string JSON_func = "JSON";
            std::string Promise_func = "Promise";
            std::string Map_func = "Map";
            std::string Set_func = "Set";
            std::string WeakMap_func = "WeakMap";
            std::string WeakSet_func = "WeakSet";
            std::string Symbol_func = "Symbol";
            std::string BigInt_func = "BigInt";
            std::string fetch_func = "fetch";
            std::string alert_func = "alert";
            std::string prompt_func = "prompt";
            std::string confirm_func = "confirm";
            std::string document_func = "document";
            std::string window_func = "window";
            std::string addEventListener_func = "addEventListener";
            std::string removeEventListener_func = "removeEventListener";
            std::string querySelector_func = "querySelector";
            std::string querySelectorAll_func = "querySelectorAll";
            std::string createElement_func = "createElement";
            std::string appendChild_func = "appendChild";
            std::string removeChild_func = "removeChild";
            std::string innerHTML_prop = "innerHTML";
            std::string innerText_prop = "innerText";
            std::string value_prop = "value";
            std::string style_prop = "style";
            std::string className_prop = "className";
            std::string id_prop = "id";
            std::string src_prop = "src";
            std::string href_prop = "href";
            std::string type_prop = "type";
            std::string length_prop = "length";
            std::string push_func = "push";
            std::string pop_func = "pop";
            std::string shift_func = "shift";
            std::string unshift_func = "unshift";
            std::string splice_func = "splice";
            std::string slice_func = "slice";
            std::string indexOf_func = "indexOf";
            std::string includes_func = "includes";
            std::string map_func = "map";
            std::string filter_func = "filter";
            std::string reduce_func = "reduce";
            std::string forEach_func = "forEach";
            std::string find_func = "find";
            std::string findIndex_func = "findIndex";
            std::string keys_func = "keys";
            std::string values_func = "values";
            std::string entries_func = "entries";
            std::string charAt_func = "charAt";
            std::string charCodeAt_func = "charCodeAt";
            std::string concat_func = "concat";
            std::string startsWith_func = "startsWith";
            std::string endsWith_func = "endsWith";
            std::string toUpperCase_func = "toUpperCase";
            std::string toLowerCase_func = "toLowerCase";
            std::string trim_func = "trim";
            std::string split_func = "split";
            std::string join_func = "join";
            std::string replace_func = "replace";
            std::string match_func = "match";
            std::string test_func = "test";
            std::string exec_func = "exec";
            std::string toFixed_func = "toFixed";
            std::string toPrecision_func = "toPrecision";
            std::string toString_func = "toString";
            std::string toLocaleString_func = "toLocaleString";
            std::string parse_func = "parse";
            std::string stringify_func = "stringify";
            std::string then_func = "then";
            std::string catch_func = "catch";
            std::string finally_func = "finally";
            std::string resolve_func = "resolve";
            std::string reject_func = "reject";
            std::string all_func = "all";
            std::string race_func = "race";
            std::string any_func = "any";
            std::string allSettled_func = "allSettled";
        };
        struct TypeScript
        {
            std::string let = "let";
            std::string const_kw = "const";
            std::string var = "var";
            std::string function = "function";
            std::string return_kw = "return";
            std::string if_kw = "if";
            std::string else_kw = "else";
            std::string for_kw = "for";
            std::string while_kw = "while";
            std::string do_kw = "do";
            std::string switch_kw = "switch";
            std::string case_kw = "case";
            std::string break_kw = "break";
            std::string continue_kw = "continue";
            std::string default_kw = "default";
            std::string try_kw = "try";
            std::string catch_kw = "catch";
            std::string finally_kw = "finally";
            std::string throw_kw = "throw";
            std::string class_kw = "class";
            std::string extends_kw = "extends";
            std::string constructor_kw = "constructor";
            std::string super_kw = "super";
            std::string this_kw = "this";
            std::string new_kw = "new";
            std::string delete_kw = "delete";
            std::string typeof_kw = "typeof";
            std::string instanceof_kw = "instanceof";
            std::string in_kw = "in";
            std::string of_kw = "of";
            std::string async_kw = "async";
            std::string await_kw = "await";
            std::string import_kw = "import";
            std::string export_kw = "export";
            std::string from_kw = "from";
            std::string as_kw = "as";
            std::string interface_kw = "interface";
            std::string type_kw = "type";
            std::string enum_kw = "enum";
            std::string implements_kw = "implements";
            std::string readonly_kw = "readonly";
            std::string public_kw = "public";
            std::string private_kw = "private";
            std::string protected_kw = "protected";
            std::string static_kw = "static";
            std::string abstract_kw = "abstract";
            std::string declare_kw = "declare";
            std::string namespace_kw = "namespace";
            std::string module_kw = "module";
            std::string require_kw = "require";
            std::string keyof_kw = "keyof";
            std::string infer_kw = "infer";
            std::string is_kw = "is";
            std::string never_kw = "never";
            std::string unknown_kw = "unknown";
            std::string any_kw = "any";
            std::string void_kw = "void";
            std::string null_kw = "null";
            std::string undefined_kw = "undefined";
            std::string true_kw = "true";
            std::string false_kw = "false";
            std::string NaN_kw = "NaN";
            std::string Infinity_kw = "Infinity";
            std::string console_log = "console.log";
            std::string console_error = "console.error";
            std::string console_warn = "console.warn";
            std::string setTimeout_func = "setTimeout";
            std::string setInterval_func = "setInterval";
            std::string clearTimeout_func = "clearTimeout";
            std::string clearInterval_func = "clearInterval";
            std::string parseInt_func = "parseInt";
            std::string parseFloat_func = "parseFloat";
            std::string isNaN_func = "isNaN";
            std::string isFinite_func = "isFinite";
            std::string Object_func = "Object";
            std::string Array_func = "Array";
            std::string String_func = "String";
            std::string Number_func = "Number";
            std::string Boolean_func = "Boolean";
            std::string Math_func = "Math";
            std::string Date_func = "Date";
            std::string RegExp_func = "RegExp";
            std::string JSON_func = "JSON";
            std::string Promise_func = "Promise";
            std::string Map_func = "Map";
            std::string Set_func = "Set";
            std::string WeakMap_func = "WeakMap";
            std::string WeakSet_func = "WeakSet";
            std::string Symbol_func = "Symbol";
            std::string BigInt_func = "BigInt";
            std::string fetch_func = "fetch";
            std::string alert_func = "alert";
            std::string prompt_func = "prompt";
            std::string confirm_func = "confirm";
            std::string document_func = "document";
            std::string window_func = "window";
            std::string addEventListener_func = "addEventListener";
            std::string removeEventListener_func = "removeEventListener";
            std::string querySelector_func = "querySelector";
            std::string querySelectorAll_func = "querySelectorAll";
            std::string createElement_func = "createElement";
            std::string appendChild_func = "appendChild";
            std::string removeChild_func = "removeChild";
            std::string innerHTML_prop = "innerHTML";
            std::string innerText_prop = "innerText";
            std::string value_prop = "value";
            std::string style_prop = "style";
            std::string className_prop = "className";
            std::string id_prop = "id";
            std::string src_prop = "src";
            std::string href_prop = "href";
            std::string type_prop = "type";
            std::string length_prop = "length";
            std::string push_func = "push";
            std::string pop_func = "pop";
            std::string shift_func = "shift";
            std::string unshift_func = "unshift";
            std::string splice_func = "splice";
            std::string slice_func = "slice";
            std::string indexOf_func = "indexOf";
            std::string includes_func = "includes";
            std::string map_func = "map";
            std::string filter_func = "filter";
            std::string reduce_func = "reduce";
            std::string forEach_func = "forEach";
            std::string find_func = "find";
            std::string findIndex_func = "findIndex";
            std::string keys_func = "keys";
            std::string values_func = "values";
            std::string entries_func = "entries";
            std::string charAt_func = "charAt";
            std::string charCodeAt_func = "charCodeAt";
            std::string concat_func = "concat";
            std::string startsWith_func = "startsWith";
            std::string endsWith_func = "endsWith";
            std::string toUpperCase_func = "toUpperCase";
            std::string toLowerCase_func = "toLowerCase";
            std::string trim_func = "trim";
            std::string split_func = "split";
            std::string join_func = "join";
            std::string replace_func = "replace";
            std::string match_func = "match";
            std::string test_func = "test";
            std::string exec_func = "exec";
            std::string toFixed_func = "toFixed";
            std::string toPrecision_func = "toPrecision";
            std::string toString_func = "toString";
            std::string toLocaleString_func = "toLocaleString";
            std::string parse_func = "parse";
            std::string stringify_func = "stringify";
            std::string then_func = "then";
            std::string catch_func = "catch";
            std::string finally_func = "finally";
            std::string resolve_func = "resolve";
            std::string reject_func = "reject";
            std::string all_func = "all";
            std::string race_func = "race";
            std::string any_func = "any";
            std::string allSettled_func = "allSettled";
        };
        struct Java
        {
            std::string kw_abstract = "abstract";
            std::string kw_assert = "assert";
            std::string kw_boolean = "boolean";
            std::string kw_break = "break";
            std::string kw_byte = "byte";
            std::string kw_case = "case";
            std::string kw_catch = "catch";
            std::string kw_char = "char";
            std::string kw_class = "class";
            std::string kw_const = "const";
            std::string kw_continue = "continue";
            std::string kw_default = "default";
            std::string kw_do = "do";
            std::string kw_double = "double";
            std::string kw_else = "else";
            std::string kw_enum = "enum";
            std::string kw_extends = "extends";
            std::string kw_final = "final";
            std::string kw_finally = "finally";
            std::string kw_float = "float";
            std::string kw_for = "for";
            std::string kw_goto = "goto";
            std::string kw_if = "if";
            std::string kw_implements = "implements";
            std::string kw_import = "import";
            std::string kw_instanceof = "instanceof";
            std::string kw_int = "int";
            std::string kw_interface = "interface";
            std::string kw_long = "long";
            std::string kw_native = "native";
            std::string kw_new = "new";
            std::string kw_null = "null";
            std::string kw_package = "package";
            std::string kw_private = "private";
            std::string kw_protected = "protected";
            std::string kw_public = "public";
            std::string kw_return = "return";
            std::string kw_short = "short";
            std::string kw_static = "static";
            std::string kw_strictfp = "strictfp";
            std::string kw_super = "super";
            std::string kw_switch = "switch";
            std::string kw_synchronized = "synchronized";
            std::string kw_this = "this";
            std::string kw_throw = "throw";
            std::string kw_throws = "throws";
            std::string kw_transient = "transient";
            std::string kw_try = "try";
            std::string kw_void = "void";
            std::string kw_volatile = "volatile";
            std::string kw_while = "while";
            std::string kw_true = "true";
            std::string kw_false = "false";
            std::string kw_assert = "assert";
            std::string kw_var = "var";
            std::string kw_yield = "yield";
            std::string kw_record = "record";
            std::string kw_sealed = "sealed";
            std::string kw_permits = "permits";
            std::string kw_non_sealed = "non-sealed";
        };
        struct CSharp
        {
            std::string kw_abstract = "abstract";
            std::string kw_as = "as";
            std::string kw_base = "base";
            std::string kw_bool = "bool";
            std::string kw_break = "break";
            std::string kw_byte = "byte";
            std::string kw_case = "case";
            std::string kw_catch = "catch";
            std::string kw_char = "char";
            std::string kw_checked = "checked";
            std::string kw_class = "class";
            std::string kw_const = "const";
            std::string kw_continue = "continue";
            std::string kw_decimal = "decimal";
            std::string kw_default = "default";
            std::string kw_delegate = "delegate";
            std::string kw_do = "do";
            std::string kw_double = "double";
            std::string kw_else = "else";
            std::string kw_enum = "enum";
            std::string kw_event = "event";
            std::string kw_explicit = "explicit";
            std::string kw_extern = "extern";
            std::string kw_false = "false";
            std::string kw_finally = "finally";
            std::string kw_fixed = "fixed";
            std::string kw_float = "float";
            std::string kw_for = "for";
            std::string kw_foreach = "foreach";
            std::string kw_goto = "goto";
            std::string kw_if = "if";
            std::string kw_implicit = "implicit";
            std::string kw_in = "in";
            std::string kw_int = "int";
            std::string kw_interface = "interface";
            std::string kw_internal = "internal";
            std::string kw_is = "is";
            std::string kw_lock = "lock";
            std::string kw_long = "long";
            std::string kw_namespace = "namespace";
            std::string kw_new = "new";
            std::string kw_null = "null";
            std::string kw_object = "object";
            std::string kw_operator = "operator";
            std::string kw_out = "out";
            std::string kw_override = "override";
            std::string kw_params = "params";
            std::string kw_private = "private";
            std::string kw_protected = "protected";
            std::string kw_public = "public";
            std::string kw_readonly = "readonly";
            std::string kw_ref = "ref";
            std::string kw_return = "return";
            std::string kw_sbyte = "sbyte";
            std::string kw_sealed = "sealed";
            std::string kw_short = "short";
            std::string kw_sizeof = "sizeof";
            std::string kw_stackalloc = "stackalloc";
            std::string kw_static = "static";
            std::string kw_string = "string";
            std::string kw_struct = "struct";
            std::string kw_switch = "switch";
            std::string kw_this = "this";
            std::string kw_throw = "throw";
            std::string kw_true = "true";
            std::string kw_try = "try";
            std::string kw_typeof = "typeof";
            std::string kw_uint = "uint";
            std::string kw_ulong = "ulong";
            std::string kw_unchecked = "unchecked";
            std::string kw_unsafe = "unsafe";
            std::string kw_ushort = "ushort";
            std::string kw_using = "using";
            std::string kw_virtual = "virtual";
            std::string kw_void = "void";
            std::string kw_volatile = "volatile";
            std::string kw_while = "while";
            std::string kw_async = "async";
            std::string kw_await = "await";
            std::string kw_var = "var";
            std::string kw_dynamic = "dynamic";
            std::string kw_yield = "yield";
            std::string kw_add = "add";
            std::string kw_remove = "remove";
            std::string kw_value = "value";
            std::string kw_global = "global";
            std::string kw_set = "set";
            std::string kw_get = "get";
            std::string kw_init = "init";
            std::string kw_record = "record";
            std::string kw_with = "with";
            std::string kw_not = "not";
            std::string kw_and = "and";
            std::string kw_or = "or";
            std::string kw_from = "from";
            std::string kw_select = "select";
            std::string kw_where = "where";
            std::string kw_group = "group";
            std::string kw_into = "into";
            std::string kw_orderby = "orderby";
            std::string kw_join = "join";
            std::string kw_let = "let";
            std::string kw_on = "on";
            std::string kw_equals = "equals";
            std::string kw_by = "by";
            std::string kw_ascending = "ascending";
            std::string kw_descending = "descending";
        };
        struct Go
        {
            std::string kw_package = "package";
            std::string kw_import = "import";
            std::string kw_func = "func";
            std::string kw_var = "var";
            std::string kw_const = "const";
            std::string kw_type = "type";
            std::string kw_struct = "struct";
            std::string kw_interface = "interface";
            std::string kw_map = "map";
            std::string kw_chan = "chan";
            std::string kw_go = "go";
            std::string kw_defer = "defer";
            std::string kw_return = "return";
            std::string kw_if = "if";
            std::string kw_else = "else";
            std::string kw_for = "for";
            std::string kw_range = "range";
            std::string kw_switch = "switch";
            std::string kw_case = "case";
            std::string kw_default = "default";
            std::string kw_select = "select";
            std::string kw_break = "break";
            std::string kw_continue = "continue";
            std::string kw_fallthrough = "fallthrough";
            std::string kw_nil = "nil";
            std::string kw_true = "true";
            std::string kw_false = "false";
        };
        struct Rust
        {
            std::string kw_fn = "fn";
            std::string kw_let = "let";
            std::string kw_mut = "mut";
            std::string kw_const = "const";
            std::string kw_static = "static";
            std::string kw_struct = "struct";
            std::string kw_enum = "enum";
            std::string kw_impl = "impl";
            std::string kw_trait = "trait";
            std::string kw_mod = "mod";
            std::string kw_use = "use";
            std::string kw_pub = "pub";
            std::string kw_crate = "crate";
            std::string kw_super = "super";
            std::string kw_self = "self";
            std::string kw_as = "as";
            std::string kw_match = "match";
            std::string kw_if = "if";
            std::string kw_else = "else";
            std::string kw_loop = "loop";
            std::string kw_for = "for";
            std::string kw_while = "while";
            std::string kw_break = "break";
            std::string kw_continue = "continue";
            std::string kw_return = "return";
            std::string kw_move = "move";
            std::string kw_ref = "ref";
            std::string kw_box = "box";
            std::string kw_true = "true";
            std::string kw_false = "false";
        };
        struct PHP
        {
            std::string kw_php_open = "<?php";
            std::string kw_php_close = "?>";
            std::string kw_echo = "echo";
            std::string kw_print = "print";
            std::string kw_if = "if";
            std::string kw_else = "else";
            std::string kw_elseif = "elseif";
            std::string kw_switch = "switch";
            std::string kw_case = "case";
            std::string kw_default = "default";
            std::string kw_for = "for";
            std::string kw_foreach = "foreach";
            std::string kw_while = "while";
            std::string kw_do = "do";
            std::string kw_function = "function";
            std::string kw_class = "class";
            std::string kw_interface = "interface";
            std::string kw_trait = "trait";
            std::string kw_namespace = "namespace";
            std::string kw_use = "use";
            std::string kw_var = "var";
            std::string kw_public = "public";
            std::string kw_protected = "protected";
            std::string kw_private = "private";
            std::string kw_static = "static";
            std::string kw_const = "const";
            std::string kw_return = "return";
            std::string kw_true = "true";
            std::string kw_false = "false";
            std::string kw_null = "null";
        };
        struct Ruby
        {
            std::string kw_def = "def";
            std::string kw_end = "end";
            std::string kw_class = "class";
            std::string kw_module = "module";
            std::string kw_if = "if";
            std::string kw_elsif = "elsif";
            std::string kw_else = "else";
            std::string kw_unless = "unless";
            std::string kw_case = "case";
            std::string kw_when = "when";
            std::string kw_while = "while";
            std::string kw_until = "until";
            std::string kw_for = "for";
            std::string kw_do = "do";
            std::string kw_begin = "begin";
            std::string kw_rescue = "rescue";
            std::string kw_ensure = "ensure";
            std::string kw_return = "return";
            std::string kw_yield = "yield";
            std::string kw_true = "true";
            std::string kw_false = "false";
            std::string kw_nil = "nil";
        };
        struct Swift
        {
            std::string kw_func = "func";
            std::string kw_let = "let";
            std::string kw_var = "var";
            std::string kw_class = "class";
            std::string kw_struct = "struct";
            std::string kw_enum = "enum";
            std::string kw_protocol = "protocol";
            std::string kw_extension = "extension";
            std::string kw_import = "import";
            std::string kw_if = "if";
            std::string kw_else = "else";
            std::string kw_switch = "switch";
            std::string kw_case = "case";
            std::string kw_default = "default";
            std::string kw_for = "for";
            std::string kw_while = "while";
            std::string kw_do = "do";
            std::string kw_return = "return";
            std::string kw_break = "break";
            std::string kw_continue = "continue";
            std::string kw_true = "true";
            std::string kw_false = "false";
            std::string kw_nil = "nil";
        };
        struct Kotlin
        {
            std::string kw_fun = "fun";
            std::string kw_val = "val";
            std::string kw_var = "var";
            std::string kw_class = "class";
            std::string kw_object = "object";
            std::string kw_interface = "interface";
            std::string kw_enum = "enum";
            std::string kw_data = "data";
            std::string kw_sealed = "sealed";
            std::string kw_if = "if";
            std::string kw_else = "else";
            std::string kw_when = "when";
            std::string kw_for = "for";
            std::string kw_while = "while";
            std::string kw_do = "do";
            std::string kw_return = "return";
            std::string kw_break = "break";
            std::string kw_continue = "continue";
            std::string kw_true = "true";
            std::string kw_false = "false";
            std::string kw_null = "null";
        };
    };
};